Los trabajos de Shen, Michael y Kumar (2011) y Fraundorfer et al. (2012) se encuentran entre los primeros que demuestran la navegación autónoma de vehículos aéreos no tripulados. Mostraron que se podían seguir puntos de referencia, evitar obstáculos y completar tareas de exploración en entornos con obstáculos. Sin embargo, no lograron demostrar una autonomía completa, ya que la primera carecía de planificación a bordo, mientras que la segunda dependía de un post procesamiento.

Los avances en hardware y software, la disponibilidad de sensores robustos pero ligeros, como cámaras de profundidad, y módulos de localización basados en visión integrada, junto con desarrollos algorítmicos, han permitido recientemente maniobras y navegación precisas y agresivas de vehículos aéreos no tripulados en entornos desconocidos, como los métodos propuestos por Thrun, Burgard y Fox (2006); Tsardoulias, Iliakopoulou, Kargakos y Petrou (2016), y por Cadena et al. (2016).

Generacion de Mapa

Trabajos recientes han defendido el uso de rejillas tridimensionales (voxel grids) para representar el entorno. Los autores en Cieslewski, Kaufmann y Scaramuzza (2017a) utilizan una implementación de mapa en rejilla tridimensional regular de voxels, mientras que los autores en Usenko et al. (2017) proponen un mapa en rejilla centrado en el robot implementado como un circulo de tamaño fijo. Estos trabajos resuelven la exploración a altas velocidades mediante la selección de estructuras de datos optimizadas para operaciones rápidas de búsqueda e inserción, a costa de limitar el espacio que se puede mapear. En contraste, como se utiliza en el trabajo de Oleynikova, Taylor, Siegwart y Nieto (2018), las tablas de dispersión espaciales (spatial hash tables) proporcionan una representación dispersa que se puede expandir dinámicamente con inserciones y búsquedas de tiempo constante.

La representación de mapas mediante octrees, propuesta por primera vez por Hornung, Wurm, Bennewitz, Stachniss y Burgard (2013), proporciona una estructura de datos jerárquica completa que, aunque sacrifica velocidad en consultas individuales, puede ser ventajosa para la planificación, como se muestra en el trabajo de Vespa et al. (2018). Los octrees lineales, propuestos por Gargantini (1982), compensan el uso reducido de memoria por velocidad almacenando solo los nodos hoja en lugar de todos los nodos del árbol, aunque aún preservan la estructura jerárquica de los octrees regulares. La combinación de estas dos características hace que esta sea una estructura de datos convincente para la navegación en entornos desconocidos y desordenados, donde es necesario realizar replanificaciones frecuentes.

Varios autores implementan estructuras adicionales sobre el mapa base. Entre las más populares se encuentran los transformadores de distancia, como TSDF, EDT, ESDF. Estos transformadores se utilizan para facilitar la verificación de colisiones y permitir consultas rápidas de información de distancia a obstáculos más cercanos, como se utiliza en los trabajos de Gao et al. (2018); Han, Gao, Zhou y Shen (2019); Han et al. (2019); Oleynikova, Taylor, Millane, Siegwart y Nieto (2018); Usenko et al. (2017) y Lin et al. (2018). Aunque estos enfoques son beneficiosos para la planificación, el cálculo de tales estructuras es costoso y requiere hardware gráfico especializado o CPUs potentes para lograr un rendimiento en tiempo real.

Algunos trabajos utilizan estructuras de datos diferentes para representar el espacio local frente al global con el fin de reducir los requisitos de cálculo y memoria. En Mohta et al. (2018), los autores utilizaron un mapa híbrido formado por la combinación de un mapa local tridimensional centrado en el robot con un mapa global bidimensional. En Collins (2019), el mapa local se representa como un KD-Tree con un mapa de voxels deslizante, mientras que un grafo topológico disperso representa todo el entorno explorado. Este último se utiliza para ayudar al robot a salir de bolsillos añadiendo arcos y nodos al grafo para capturar posibles trayectorias que el robot ha pasado pero no ha tomado. Finalmente, en Florence, Carter, Ware y Tedrake (2018), se propone un método para utilizar un mapa global bidimensional para guiar la exploración local basada en consultas de proximidad conscientes de la incertidumbre para la planificación sin ninguna discretización previa de los datos. Aunque potencialmente útiles, en plataformas más limitadas, los enfoques híbridos introducen complejidad adicional en el software.

Path Planning

Las obras de Papachristos, Khattak y Alexis (2017); Selin, Tiger, Duberg, Heintz y Jensfelt (2019), y Cieslewski, Kaufmann y Scaramuzza (2017b) se centran en la exploración pura. En particular, Papachristos et al. (2017) construye un árbol de exploración rápida y aleatoria (RRT, por sus siglas en inglés) con costo proporcional al número de nuevos voxels para encontrar el próximo objetivo y un segundo RRT para encontrar una ruta hacia el punto de vista seleccionado que minimiza la incertidumbre de la pose y los puntos de referencia del robot. El trabajo de Selin et al. (2019) inserta nodos con alto potencial de ganancia de información en un RRT para utilizarlos como objetivos de planificación cuando el agente ha explorado todo en sus alrededores cercanos. En lugar de planificar trayectorias, los autores en Cieslewski et al. (2017b) utilizan un modo reactivo que genera comandos de velocidad instantáneos hacia las fronteras.

El trabajo de Oleynikova, Taylor, Siegwart y Nieto (2018) también aborda la exploración pero agrega un objetivo de alcanzar una meta para abordar explícitamente el problema de quedarse atascado en mínimos locales. Seleccionan la siguiente meta al dibujarla con alguna probabilidad desde el objetivo global. En caso contrario, establecen un objetivo local al encontrar un punto desocupado en el campo de visión, maximizando una ganancia aproximada de exploración.

Las obras en Gao et al. (2018); Mohta et al. (2018) y Lin et al. (2018) utilizan la salida de la etapa de planificación para establecer un problema de optimización que genere trayectorias seguras y dinámicamente viables. Todos intentan generar un corredor seguro para limitar la optimización, pero difieren significativamente en su enfoque. En particular, en Gao et al. (2018), se propone el uso de un método de marcha rápida en un campo de velocidades basado en ESDF para obtener una trayectoria indexada en el tiempo, que se expande en una segunda etapa para incluir los cubos libres centrados en cada nodo a lo largo de la trayectoria. Los autores en Mohta et al. (2018) utilizan un A* para planificar una trayectoria en un grafo híbrido que vincula los voxels en tanto un mapa 3D local como un mapa de información global 2D. Luego, un paso de modificación de trayectoria desplaza la trayectoria original lejos de los obstáculos utilizando un plano bisector que se cruza con poliedros conectados a través de cada punto de referencia. Finalmente, el trabajo de Lin et al. (2018) utiliza un buscador de rutas global fuera de línea para generar una ruta guía. Durante la navegación, se selecciona el objetivo para el planificador local cerca de la ruta guía, y se utiliza A* para buscar una ruta de distancia mínima hacia él.

A diferencia de los otros métodos en nuestra comparación, que generan planes basados en mapas, en Florence et al. (2018), los autores proponen utilizar localmente un planificador de movimiento estocástico sin mapas para elegir entre una biblioteca finita de primitivas de movimiento tridimensional, con orientación global proporcionada por un planificador A* bidimensional.

Independientemente del enfoque utilizado para generar la ruta, un aspecto crítico para la navegación libre de colisiones en entornos desconocidos es imponer restricciones en el plan de movimiento para navegar dentro del campo de visión actual hacia el siguiente punto de referencia. Nuestro método incorpora esta idea, que también fue utilizada por los métodos en Cieslewski et al. (2017a); Oleynikova, Taylor, Siegwart y Nieto (2018), y Florence et al. (2018). En contraste, el método en Gao et al. (2018) asume que los sensores a bordo del robot cubren toda una región esférica centrada en el robot, lo cual es difícil de lograr en la práctica. Similar a la técnica utilizada en Papachristos et al. (2017) y Selin et al. (2019), construimos árboles de exploración aleatoria rápida (RRTs) en el espacio tridimensional representado por todo el mapa. Además, también utilizamos un enfoque de muestreo informado similar al método propuesto en Lin et al. (2018) para acelerar la búsqueda. Para obtener mayores mejoras de rendimiento, hemos implementado un algoritmo eficiente de verificación de colisiones aprovechando la estructura proporcionada por nuestro mapa.

Generación de trayectoria

El algoritmo presentado por Gao et al. (2018) propone limitar toda la trayectoria dentro del espacio libre y sus derivadas dentro del espacio factible con restricciones estrictas; plantean un programa cuadrático convexo (QP, por sus siglas en inglés) con restricciones utilizando una base de Bernstein para representar la trayectoria como curvas de Bezier por tramos. Para cada tramo de la trayectoria, la optimización resuelve un factor de escala temporal y los puntos de control de las curvas minimizando la integral del jerk. De manera similar, los autores en Mohta et al. (2018) formulan un QP para la generación de trayectorias donde, además de las restricciones habituales de velocidad, aceleración y jerk, añaden un término en la función de costo proporcional al cuadrado de la distancia entre la trayectoria y los segmentos de línea de la trayectoria modificada. La trayectoria se representa como un spline polinómico de séptimo orden. Para asignar tiempo a cada segmento de spline, lo cual es crucial para la viabilidad del QP y la calidad de la trayectoria resultante, utilizan los tiempos obtenidos ajustando un perfil de velocidad trapezoidal a través de los segmentos.

En contraste, los autores en Usenko et al. (2017) plantean un problema de replanificación local como la optimización de una función de costo formada por un término que penaliza las desviaciones de posición y velocidad al final de la trayectoria, un costo de colisión, un costo integral sobre las derivadas al cuadrado, y un límite suave en la norma de las derivadas temporales a lo largo de la trayectoria. La trayectoria local se representa mediante un B-spline cúbico uniforme, lo que simplifica el cálculo de los términos de costo, y el problema se resuelve utilizando un paquete de optimización no lineal. Otro enfoque se presenta en Lin et al. (2018). En este trabajo, se formula un problema de optimización no lineal utilizando polinomios piece wise de octavo orden para representar la trayectoria. Iteran sobre dos problemas de optimización. El primer problema itera solo con un costo de colisión. El segundo problema agrega un costo de suavidad en la cuarta derivada de la posición y una penalización dinámica en la velocidad y la aceleración.

El método de Cieslewski et al. (2017b) utiliza un modo reactivo para generar comandos de velocidad instantáneos basados en las fronteras actualmente observadas. Para las fronteras dentro del rango de detección del sensor de profundidad, la velocidad deseada será la máxima y apuntará hacia el volumen desconocido. En contraste, para las fronteras más cercanas al robot, la velocidad deseada será menor. Por otro lado, el algoritmo propuesto en Florence et al. (2018) busca en una biblioteca finita un primitivo de movimiento 3D que maximice el progreso euclidiano hacia el objetivo global, considerando las probabilidades de colisión para trayectorias completas en entornos con obstáculos convexos únicamente.

Un aspecto importante de la navegación en el campo de visión es asegurar que el eje de la cámara esté alineado con la dirección del movimiento. Oleynikova, Taylor, Siegwart y Nieto (2018), y Cieslewski et al. (2017a) intentaron abordar esta restricción implementando un enfoque de seguimiento de velocidad en dirección de cabeceo, pero no garantizan que las trayectorias de cabeceo generadas cumplan con las restricciones dinámicas angulares. Además, las restricciones dinámicas de movimiento lineal del robot deben manejarse explícitamente para garantizar que permanecerá en regiones seguras. En particular, los trabajos de Cieslewski et al. (2017a); Selin et al. (2019) y Lin et al. (2018) no manejan las restricciones dinámicas explícitamente. Además, los métodos propuestos por Usenko et al. (2017) y Lin et al. (2018) resuelven problemas de optimización con límites suaves, lo que genera trayectorias suaves pero que aún pueden no ser dinámicamente viables. Finalmente, en los algoritmos propuestos en Florence et al. (2018); Gao et al. (2018); Oleynikova, Taylor, Siegwart y Nieto (2018); Papachristos et al. (2017) y Mohta et al. (2018), se resuelve un problema de optimización con restricciones para manejar las restricciones dinámicas de posición de manera explícita. Sin embargo, resolver problemas de optimización en línea es computacionalmente costoso, incluso en el caso convexo. En nuestro enfoque, las restricciones dinámicas se incorporan sin necesidad de una solución basada en optimización.

Multi-agent collision avoidance

La planificación de trayectorias para la navegación de coexistencia de varios agentes ha sido un problema ampliamente estudiado, y se puede encontrar una gran cantidad de propuestas en el estado del arte. Todas estas propuestas pueden agruparse en dos conjuntos según si la coordinación es centralizada o descentralizada. O, si hay comunicación entre los agentes o se considera un módulo de predicción de estado para agentes vecinos para obtener las intenciones del robot. Para este trabajo, asumimos la comunicación dentro de un radio limitado entre los agentes y que el algoritmo se calcula de manera descentralizada.

El "Optimal Reciprocal Collision Avoidance" (ORCA), propuesto por Van Den Berg, Guy, Lin y Manocha (2011), está entre los primeros trabajos que lograron la coexistencia de muchos agentes en un espacio compartido actuando de manera independiente y sin comunicación con otros robots. El método se basa en los llamados "velocity obstacles" (obstáculos de velocidad), que son el conjunto de todas las velocidades relativas entre dos agentes que resultarán en una colisión en algún tiempo futuro. Sin embargo, los agentes oscilaban en configuraciones específicas o quedaban atrapados en un mínimo local inducido por las proyecciones de velocidad. Snape, Van Den Berg, Guy y Manocha (2011) resolvieron posteriormente el problema de oscilación. La contribución principal es que consideran explícitamente que los otros robots también perciben su entorno y cambian sus trayectorias en consecuencia al proyectar las velocidades, en un algoritmo llamado "Reciprocal Velocity Obstacles" (RVO). No obstante, la extensión al espacio tridimensional no es trivial y aún persiste la falta de un plan global.

Shome, Solovey, Dobson, Halperin y Bekris (2020) propusieron un método para problemas acoplados de múltiples robots, que ofrece garantías de calidad de trayectoria deseables con eficiencia computacional, llamado dRRT*.  Primero construyen una hoja de ruta para cada robot y buscan implícitamente el producto tensorial de estas estructuras en el espacio compuesto identificando las condiciones para la convergencia a trayectorias óptimas mediante algunas heurísticas. Las métricas reportadas indican la obtención rápida de trayectorias de alta calidad al aumentar el número de robots, donde varias alternativas fallan. Aunque este método evita el problema del mínimo local y puede aplicarse directamente a espacios tridimensionales, no se consideran las dinámicas de los robots. No considerar las dinámicas del robot y solo sus posiciones conduce a la circunnavegación de los agentes para su evitación.

Entre los algoritmos que consideran el modelo dinámico del robot y las restricciones físicas se encuentran los métodos propuestos por Chen, Cutler y How (2015) y por Luis y Schoellig (2019). Ambos enfoques plantean un problema de optimización que crea una trayectoria para los agentes dada una función de costo y condiciones predefinidas. Así, la evitación de obstáculos se considera como una restricción en el problema de optimización, lo que hace que los obstáculos estáticos y los agentes circundantes se modelen con una función matemática lineal. El primero formula el problema de manera cuadrática, mientras que el segundo utiliza control predictivo basado en modelo. Mostraremos más adelante que ambos métodos escalan deficientemente con respecto al número de agentes y la cantidad de obstáculos estáticos.

Finalmente, el marco más cercano a este trabajo es la propuesta de Zhou, Wang, et al. (2021). Introducen una planificación de trayectoria espacial-temporal descentralizada basada en un minimizador de esfuerzo de control no restringido (MINCO). Su informe asegura una planificación local de alta calidad para cada agente sujeto a cualquier restricción de coordinación del enjambre o requisitos de seguridad en entornos con obstáculos. La generación de trayectorias locales se formula como un problema de optimización no restringido desencadenado por un mecanismo descentralizado asíncrono. La propuesta general amplía su método anterior propuesto por Zhou, Wen, et al. (2021). Desarrollaron el problema bajo un marco de planificación local basado en gradientes, donde la evitación de colisiones se logra formulando el riesgo de colisión como una penalización de un problema de optimización no lineal.
